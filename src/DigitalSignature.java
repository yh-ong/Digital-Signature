import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 
import java.security.PrivateKey;
import java.security.Signature;
import java.util.Scanner;

public class DigitalSignature { 
    public static String getMd5(String input) 
    { 
        try {
            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5"); 
            
            /* digest() method is called to calculate message digest 
            of an input digest() return array of byte */
            byte[] messageDigest = md.digest(input.getBytes());
            
            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest);
            
            // Convert message digest into hex value 
            String hashtext = no.toString(16); 
            while (hashtext.length() < 32) { 
                hashtext = "0" + hashtext; 
            } 
            return hashtext; 
        } catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    }
    
    public static void main(String args[]) throws Exception 
    { 
       Scanner sc = new Scanner(System.in);
       
       try {
           // Create Key Pair Generator Object
           KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
           keyPairGen.initialize(2048);
           // Generate the pair of keys
           KeyPair pair = keyPairGen.generateKeyPair();
           // Getting private key from the key pair
           PrivateKey privKey = pair.getPrivate();
           // Creating a Signature Object
           Signature sign = Signature.getInstance("SHA256withDSA");

           /**
            * Initializing the Signature
            */
           sign.initSign(privKey);

           /**
            * Creating the Digital Signature
            */
           System.out.print("Create the Digital Signature: ");
           String value1 = getMd5(sc.nextLine());
           System.out.println("Your HashCode Generated by MD5 is: " + value1);
           System.out.println("------------------------------");

           byte[] val1byte = value1.getBytes();

           System.out.println("Signature Value 1: " + val1byte);
           System.out.print("\n");

           sign.update(val1byte);
           byte[] signature = sign.sign();

           /**
            * Verifying the Digital Signature
            */
           System.out.print("Enter to Verify: ");
           String value2 = getMd5(sc.nextLine());
           System.out.println("Your HashCode Generated by MD5 is: " + value2);
           System.out.println("------------------------------");

           byte[] val2byte = value2.getBytes();

           System.out.println("Signature Value 2: " + val2byte);
           System.out.print("\n");

           sign.initVerify(pair.getPublic());
           sign.update(val2byte);

           /**
            * Check the Hash Value
            */
           if(value1.equals(value2) == true) {
               System.out.println("Hash Value Match");
               boolean bool = sign.verify(signature);
               if(bool) {
                   System.out.println("Signature Verified");
               } else {
                   System.out.println("Signature Failed");
               }
           } else {
               System.out.println("Hash Value Not Match");
           }
       } catch (Exception e) {
           System.out.println("Digital Signature Error!");
       }
    }
}